@use "sass:math";
// Breakpoint	        Class infix	    Dimensions
// X-Small	            None	        <576px
// Small	            sm	            ≥576px
// Medium	            md	            ≥768px
// Large	            lg	            ≥992px
// Extra large	        xl	            ≥1200px
// Extra extra large	xxl	            ≥1400px

// @include breakpoint (md) {
//     flex: 0 0 100%;
// }

@mixin breakpoint($point) {
    @if $point==base {
        @media screen and (max-width: rem(1100)) {
            @content;
        }
    } @else if $point==lg {
        @media screen and (max-width: rem(992)) {
            @content;
        }
    } @else if $point==md {
        @media screen and (max-width: rem(768)) {
            @content;
        }
    } @else if $point==sm {
        @media screen and (max-width: rem(576)) {
            @content;
        }
    } @else if $point==xsm {
        @media screen and (max-width: rem(500)) {
            @content;
        }
    }
}

@mixin no-tap-highlight {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
}

@function toRem($value) {
    $remValue: ($value / 16) + rem;
    @return $remValue;
}

@function rem($pixel) {
    @if math.is-unitless($pixel) {
        @return math.div($pixel, 16) + rem;
    } @else {
        @error 'Не используйте единицы измерения при работе с функцией rem()! Передавайте аргументом только числа.';
    }
}

.box-test2 {
    width: rem(400); // 600px => 37.5rem
    height: rem(250); // 280px => 17.5rem
    padding: rem(40); // 40px  => 2.5rem
    border-radius: rem(15); // 15px  => 0.9375rem
    box-shadow: rem(6) // 6px   => 0.375rem
        rem(6) // 6px   => 0.375rem
        rem(10) deeppink; // 10px  => 0.625rem

    /* 768px => 48rem */
    @media (width < rem(768)) {
        padding: rem(20); // 20px  => 1.25rem
        font-size: rem(14); // 14px  => 0.875rem
    }
}

@mixin fluid-text($max: 48, $min: 16) {
    $maxViewportWidth: 1400;
    $minViewportWidth: 360;

    $maxSize: math.div($max, 16);
    $minSize: math.div($min, 16);
    $maxWidth: math.div($maxViewportWidth, 16);
    $minWidth: math.div($minViewportWidth, 16);

    $slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
    $yAxisIntersection: -$minWidth * $slope + $minSize;

    font-size: clamp(#{$minSize * 1rem}, #{$yAxisIntersection * 1rem} + #{$slope * 100vw}, #{$maxSize * 1rem});
}

.box-test2 {
    h1 {
        @include fluid-text(40, 28);
    }
    h2 {
        @include fluid-text(36, 26);
    }
    h3 {
        @include fluid-text(32, 24);
    }
    h4 {
        @include fluid-text(28, 22);
    }
    h5 {
        @include fluid-text(24, 20);
    }
    h6 {
        @include fluid-text(20, 18);
    }
    body {
        @include fluid-text(18, 16);
    }

    // rem-clamp(14, 16);
    // rem-clamp(16, 18);
    // rem-clamp(18, 20);
    // rem-clamp(20, 24);
    // rem-clamp(22, 28);
    // rem-clamp(24, 32);
    // rem-clamp(26, 36);
    // rem-clamp(28, 40);
    // rem-clamp(30, 44);
    // rem-clamp(32, 48);
    // rem-clamp(34, 52);
    // rem-clamp(36, 56);
}

@function rem-clamp($min: 16, $max: 48) {
    $maxViewportWidth: 1200;
    $minViewportWidth: 320;

    $maxSize: math.div($max, 16);
    $minSize: math.div($min, 16);
    $maxWidth: math.div($maxViewportWidth, 16);
    $minWidth: math.div($minViewportWidth, 16);

    $slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
    $yAxisIntersection: -$minWidth * $slope + $minSize;

    @return clamp(#{$minSize * 1rem}, #{(math.round($yAxisIntersection * 1000) / 1000) * 1rem} + #{(math.round($slope * 10000) / 10000) * 100vw}, #{$maxSize * 1rem});
}
